#include <iostream>
#include <cmath>

using namespace std;

int main()
{
    
    float Max_High, Current_High, Current_V = 0, Zero_V, delay, duration, Local_Time, Global_Time = 0, Fly_Time, Add_Time, maxV, g = 9.8, l=0, Fly_Time2;
    
    bool Up_Down = 1;
    
    cout << "Enter high: ";
    cin >> Max_High;
    
    cout << "Enter delay: ";
    cin >> delay;
    
    cout << "Enter duration: ";
    cin >> duration;

    Current_High = Max_High;
    
    Local_Time = delay;
    
    //Global_Time = -delay;
    
    //cout << Current_High << " "<< Current_V<< endl;
    
    Fly_Time = sqrt(2*Max_High/g);
    cout << "                         " <<Fly_Time << endl;
    
    while (Global_Time < duration) {  // условие прекарщения работы
        
        cout << endl << "DOWN" << endl << endl;
        
        if (Up_Down == 1) {  // опреденяем движение вверх или вниз
        
            while (Current_High > 0.0){ //&& (Global_Time < duration)) {  // пока скорость больше минимума
                
                Current_High = Max_High - g*pow(Local_Time,2)/2;
                Current_V = g*Local_Time;
                Local_Time = Local_Time + delay;   // 
                //Global_Time = Global_Time + Local_Time - delay;
                if (Current_High > 0.0){ //&& (Global_Time < duration)) {  // если прошел период задержки, то выводим значения
                    
                //    cout << "High: " << Current_High << "    " << "Velocity: " << Current_V << endl;
                    cout << "High: ";
                    printf("%7.3f", Current_High);
                    cout << "  |  Velocity: ";
                    printf("%7.3f", Current_V);
                    cout << "  |  Time of movement: " << Local_Time-delay << endl;
                    
                    
                } else {
                    
                    //  Local_Time = abs(Local_Time - Fly_Time);
                    
                    Global_Time = Global_Time + Local_Time - delay;
                    Local_Time = Local_Time - Fly_Time;
                    
                    cout << Fly_Time  << "    " << Local_Time<< endl;
                }
        
                
            }
        
        Up_Down = 0;  // пересчитываем значения для движения вверх
        
        
        Zero_V = sqrt(0.7*g*Max_High);
        //Max_High = 0.7*Max_High;
        //Fly_Time = (2*Zero_V + sqrt(4*Zero_V*Zero_V - 8*g*Max_High))/(2*g);
        //Fly_Time2 = (2*Zero_V - sqrt(4*Zero_V*Zero_V - 8*g*Max_High))/(2*g);
        Fly_Time = Zero_V/g; 
        
        //Global_Time = Global_Time + Local_Time ; 
        Zero_V = sqrt(0.7*2*g*Max_High);
        
        
        }
        
        
        if (Up_Down == 0) {
            
            cout << endl << "UP" << endl << endl;
            
            while (Current_V > 0.0) {//&& (Global_Time < duration)) {         // то же, чтои для движения вниз, но немного другие формулы
                
                Current_High = Zero_V*Local_Time - g*pow(Local_Time,2)/2;
                Current_V = Zero_V - g*Local_Time;
                Local_Time = Local_Time + delay;
                //Global_Time = Global_Time + Local_Time;
                if (Current_V > 0.0) {// && (Global_Time < duration)) {
                    
                 //   cout << "High: " << Current_High << "    " << "Velocity: " << -Current_V << endl;
                    cout << "High: ";
                    printf("%7.3f", Current_High);
                    cout << "  |  Velocity: ";
                    printf("%7.3f", Current_V);
                    cout << "  |  Time of movement: " << Local_Time - delay << endl;
                    
                    
                } else {
                    
                  //  Local_Time = abs(Local_Time - Fly_Time);
                
                Local_Time = Local_Time - Fly_Time;
                Global_Time = Global_Time + Local_Time;
                cout << Fly_Time <<  "     " << Local_Time<< "     " << Zero_V << endl;
                
                }
                    
            }
            
        Up_Down = 1; // пересчитываем значения для движения вниз
        
      
        //Fly_Time = sqrt(2*Max_High/g) - delay;
     //   Global_Time = Global_Time +  Local_Time; 
            
        }
        
    }

    cout << "Time: " << Global_Time - delay;

    return 0;
}
